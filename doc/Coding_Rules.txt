5CODING RULES
============

Generality:
- No tabulations allowed ! Use 4-spaces left instead
- Ventilate braces on the same level as the instruction
- 1-space left between instruction and condition
- Accolades are mandatory for every instructions if an other instruction in core function use them
- Multiple conditions in an instruction are surrounded by parenthesis
- Pointer character(s) should be attached to the variable and not to the type
- Put spaces before and after operators, but not inside parenthesis or brackets
- Avoid comments on the same line as accolades
- Try not to exceed the 80 characters limit on one line. If it's not possible, 140 characters is the max
- Add a blank line at the end of each file to help file printing
- Favour the use of underscores to separate words of functions, variables, macros, ...
- Think "MultiThreading" and "Portability"

===============================================================================
if-else
===============================================================================

if ((condition1) && (condition2))
{
    // do something
}
else if (condition)
{
    // do something else
}
else
{
    // do something else
}

===============================================================================
for
===============================================================================

for (i = 0; i < 10; i++, j++)
{
    // do something
}

===============================================================================
while
===============================================================================

while (condition)
{
    // do something
}

===============================================================================
do-while
===============================================================================

do
{
    // do something
} while (condition)

===============================================================================
switch
===============================================================================
- Separate cases by 1-blank line

switch (variable)
{
    case 1:
        // do something
        break;

    case 2:
        // do something
        break;

    case 3:
        // do something
        break;

    default:
        // do something
        break;
}

===============================================================================
macro
===============================================================================
- Capital letters mandatory
- Start with library name

e.g.
#define GPR_DATE_MAX_LENGTH 15

===============================================================================
enum
===============================================================================
- Capital letters mandatory
- Capital letter for the first character of each word of the name
- Use the enum name as a prefix

enum My_Enum
{
    MY_ENUM_OK,
    MY_ENUM_KO
};

===============================================================================
global variables
===============================================================================
- Each word starts with a capital letter

e.g.
short My_Global_Variable = 5;

===============================================================================
structures
===============================================================================
- Avoid typedef (Hidden type confusion)
- Comments are optional but should be aligned if used
- Prefix with "gpr_"

struct gpr_my_struct
{
    char *param1;        // Explanation
    unsigned int param2; // Explanation
};

===============================================================================
functions
===============================================================================
- Function names start with the library name followed by the module name
- Separate main blocks by /**/ explanation comments for dense functions
- 2-spaces left for the goto label
- No spaces between a function name and the parameter list
- Function return value should be on the same level than the function itself
- Try to declare variables at the beginning of each function
- Add a return statement for void return value functions

static struct my_struct *gpr_time_function(const char *param1, size_t param2)
{
    size_t ret;

    /* Allocate ... */
    // ...

    /* Initialize ...*/
    // ...
    ret = my_other_fun(param1, param2);
    goto end;

  end:
    return tmp_struct;
}

===============================================================================
arrays
===============================================================================
- If a static array is null-terminated, show it with the "+ 1" suffix

e.g.
#define GPR_ARRAY_LENGTH 9
char array[GPR_ARRAY_LENGTH + 1]; // A string of 9 characters long + 1 null-terminated character

